cmake_minimum_required(VERSION 2.8)

project(OpenAL)

# detect the architecture (note: this test won't work for cross-compilation)
include(CheckTypeSize)
check_type_size(void* SIZEOF_VOID_PTR)
if("${SIZEOF_VOID_PTR}" STREQUAL "4")
    set(ARCH_32BITS 1)
elseif("${SIZEOF_VOID_PTR}" STREQUAL "8")
    set(ARCH_64BITS 1)
else()
    message(FATAL_ERROR "Unsupported architecture")
    return()
endif()

if(WIN32)
    if(ARCH_32BITS)
        set(OPENAL_DLL ${CMAKE_CURRENT_SOURCE_DIR}/bin/x86/openal32.dll CACHE INTERNAL "")
        if(MSVC)
            set(OPENAL_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/libs-msvc/x86/openal32.lib CACHE INTERNAL "")
        else()
            set(OPENAL_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/libs-mingw/x86/libopenal32.a CACHE INTERNAL "")
        endif()
    elseif(ARCH_64BITS)
        set(OPENAL_DLL ${CMAKE_CURRENT_SOURCE_DIR}/bin/x64/openal32.dll CACHE INTERNAL "")
        if(MSVC)
            set(OPENAL_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/libs-msvc/x64/openal32.lib CACHE INTERNAL "")
        else()
            set(OPENAL_LIBRARY ${CMAKE_CURRENT_SOURCE_DIR}/libs-mingw/x64/libopenal32.a CACHE INTERNAL "")
        endif()
    endif()
endif()